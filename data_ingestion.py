{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "467ca8fe-236b-415e-be0b-af6dfecf911d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine, Column, Float, Integer\n",
    "from sqlalchemy.orm import sessionmaker\n",
    "from sqlalchemy.orm import declarative_base\n",
    "import pandas as pd\n",
    "\n",
    "Base = declarative_base()\n",
    "\n",
    "class DataHandler:\n",
    "    def __init__(self, database_url):\n",
    "        self.engine = create_engine(database_url)\n",
    "        self.create_tables()\n",
    "\n",
    "    def create_tables(self):\n",
    "        Base.metadata.create_all(self.engine)\n",
    "\n",
    "    def load_csv_to_database(self, file_path, table_name):\n",
    "        data = pd.read_csv(file_path)\n",
    "        data.to_sql(table_name, self.engine, if_exists='replace', index=False)\n",
    "\n",
    "class CSVLoader:\n",
    "    def __init__(self, filename):\n",
    "        self.filename = filename\n",
    "        self.data = None\n",
    "\n",
    "    def load_data(self):\n",
    "        try:\n",
    "            self.data = pd.read_csv(self.filename)\n",
    "            print(f\"Data loaded successfully from {self.filename}\")\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading data from {self.filename}: {e}\")\n",
    "\n",
    "    def get_data(self):\n",
    "        return self.data\n",
    "\n",
    "class DataIngestor:\n",
    "    def __init__(self, database_url):\n",
    "        self.database_url = database_url\n",
    "        self.data_handler = DataHandler(database_url)\n",
    "\n",
    "    def preprocess_data(self, training_data_path, ideal_functions_path, test_data_path):\n",
    "        self.data_handler.load_csv_to_database(training_data_path, 'training_data')\n",
    "        self.data_handler.load_csv_to_database(ideal_functions_path, 'ideal_functions')\n",
    "\n",
    "        test_loader = CSVLoader(test_data_path)\n",
    "        test_loader.load_data()\n",
    "        test_data = test_loader.get_data()\n",
    "\n",
    "        if test_data is not None:\n",
    "            self.load_test_data_to_database(test_data)\n",
    "        else:\n",
    "            print(f\"No test data loaded from {test_data_path}\")\n",
    "\n",
    "    def load_test_data_to_database(self, test_data):\n",
    "        Session = sessionmaker(bind=self.data_handler.engine)\n",
    "        session = Session()\n",
    "\n",
    "        try:\n",
    "            for index, row in test_data.iterrows():\n",
    "                test_instance = TestData(x=row['x'], y=row['y'])\n",
    "                session.add(test_instance)\n",
    "                session.commit()\n",
    "\n",
    "            print(\"Test data loaded successfully.\")\n",
    "\n",
    "        except Exception as e:\n",
    "            session.rollback()\n",
    "            print(f\"Error loading test data: {e}\")\n",
    "\n",
    "        finally:\n",
    "            session.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc47017f-11ef-4aba-b3c7-e11b36792ef5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
