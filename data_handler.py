{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4330e4ad-14f0-4902-87e2-4a86d50c59b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine, Column, Float, Integer\n",
    "from sqlalchemy.orm import sessionmaker\n",
    "from sqlalchemy.orm import declarative_base\n",
    "\n",
    "Base = declarative_base()\n",
    "\n",
    "class TrainingData(Base):\n",
    "    __tablename__ = 'training_data'\n",
    "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
    "    x = Column(Float)\n",
    "    y1 = Column(Float)\n",
    "    y2 = Column(Float)\n",
    "    y3 = Column(Float)\n",
    "    y4 = Column(Float)\n",
    "\n",
    "class TestData(Base):\n",
    "    __tablename__ = 'test_data'\n",
    "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
    "    x = Column(Float)\n",
    "    y = Column(Float)\n",
    "\n",
    "class IdealFunction(Base):\n",
    "    __tablename__ = 'ideal_functions'\n",
    "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
    "    x = Column(Float)\n",
    "    y_values = [Column(Float) for _ in range(50)]\n",
    "\n",
    "class DatabaseHandler:\n",
    "    def __init__(self, database_url):\n",
    "        self.engine = create_engine(database_url)\n",
    "        self.create_tables()\n",
    "\n",
    "    def create_tables(self):\n",
    "        Base.metadata.create_all(self.engine)\n",
    "\n",
    "    def load_data_from_csv(self, file_path, table):\n",
    "        data = pd.read_csv(file_path)\n",
    "        data.to_sql(table.__tablename__, self.engine, if_exists='replace', index=False)\n",
    "\n",
    "class DataLoader:\n",
    "    def __init__(self, filename):\n",
    "        self.filename = filename\n",
    "        self.data = None\n",
    "\n",
    "    def load_data(self):\n",
    "        try:\n",
    "            self.data = pd.read_csv(self.filename)\n",
    "            print(f\"Data loaded successfully from {self.filename}\")\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading data from {self.filename}: {e}\")\n",
    "\n",
    "    def get_data(self):\n",
    "        return self.data\n",
    "\n",
    "class IdealFunctionSelector:\n",
    "    def __init__(self, database_url, training_data_path, ideal_functions_path, test_data_path):\n",
    "        self.database_url = database_url\n",
    "        self.training_data_path = training_data_path\n",
    "        self.ideal_functions_path = ideal_functions_path\n",
    "        self.test_data_path = test_data_path\n",
    "        self.db_handler = DatabaseHandler(database_url)\n",
    "        self.training_data = None\n",
    "        self.ideal_functions = None\n",
    "        self.test_data = None\n",
    "        self.selected_functions = None\n",
    "\n",
    "    def preprocess_data(self):\n",
    "        self.db_handler.load_data_from_csv(self.training_data_path, TrainingData)\n",
    "        self.db_handler.load_data_from_csv(self.ideal_functions_path, IdealFunction)\n",
    "        test_loader = DataLoader(self.test_data_path)\n",
    "        test_loader.load_data()\n",
    "        self.test_data = test_loader.get_data()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc672848-6933-4703-bd2e-c0b8f65c5078",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
