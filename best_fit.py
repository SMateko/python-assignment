{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "02c96dc8-89fe-4abc-b712-b8a787517994",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique functions:\n",
      "Function 1: unique_func_2 with parameters [-4.14861535e+02  4.82476870e-03  7.89394517e-03]\n",
      "Function 2: unique_func_1 with parameters [-0.03858873  0.99975485 -0.0944507 ]\n",
      "Function 3: unique_func_1 with parameters [ 0.00792444  1.0024396  -0.05157716]\n",
      "Function 4: unique_func_3 with parameters [1.36561693e-02 5.05645419e+01 1.26669479e-02]\n",
      "Mapping of test data to unique functions:\n",
      "x = 17.5, y = 34.16104, y_mapped = [-34.937413113277046, 0.08061884955084109, -0.08090112658677966, 0.026323117226350175]\n",
      "x = 0.3, y = 1.2151024, y_mapped = [-0.5925889194789602, -0.10638448855007482, -0.04911948515310529, 0.026323117226348353]\n",
      "x = -8.7, y = -16.843908, y_mapped = [17.41169248729473, -0.1287703448811761, -0.04485421097831862, -0.0009892214086150014]\n",
      "x = -19.2, y = -37.17087, y_mapped = [38.32945696857835, -0.0805508392303624, -0.054902223903003346, -0.0009892214086150014]\n",
      "x = -11.0, y = -20.263054, y_mapped = [22.004976893164073, -22.41158552868882, 0.20183041609408353, -0.0009892214086150014]\n",
      "x = 0.8, y = 1.4264555, y_mapped = [-1.5933868601395698, -0.13416756396449298, -0.043385919120683764, 0.026323117226350175]\n",
      "x = 14.0, y = -0.06650608, y_mapped = [-27.972157357864436, -0.3670993488919024, 0.025077565370404613, 0.026323117226350175]\n",
      "x = -10.4, y = -2.007094, y_mapped = [20.807203390661765, -0.03781799719117871, -0.06393488719339002, -0.0009892214086150014]\n",
      "x = -15.0, y = -0.20536347, y_mapped = [29.97980368904661, -0.12772905304486554, -0.045281305203944806, -0.0009892214086150014]\n",
      "x = 5.8, y = 10.711373, y_mapped = [-11.598420600388465, -0.074134475667373, -0.05559289728170917, 0.026323117226350175]\n",
      "x = -7.6, y = -39.4954, y_mapped = [15.21332471035304, 0.05307265075498413, -0.08461086497436303, -0.0009892214086150014]\n",
      "x = -19.8, y = -19.915014, y_mapped = [39.5198855263506, -0.04098874180190546, -0.06388483652295784, -0.0009892214086150014]\n",
      "x = 18.9, y = 19.193245, y_mapped = [-37.71821615419046, -0.09621972302362025, -0.05080964716440841, 0.026323117226350175]\n",
      "x = 6.9, y = 7.8014545, y_mapped = [-13.798122762832227, -0.12171642760541411, -0.04575493602058064, 0.026323117226350175]\n",
      "x = 8.8, y = -0.7260513, y_mapped = [-17.59570958493498, -0.06649582214585253, -0.05703715114647308, 0.026323117226350175]\n",
      "x = -9.5, y = -9.652251, y_mapped = [19.009898440099562, -0.09163285688266042, -0.052359437241924815, -0.0009892214086150014]\n",
      "x = 8.1, y = -16.659458, y_mapped = [-16.196908240363115, 0.06052715872252554, -0.08068767923729617, 0.026323117226350175]\n",
      "x = 7.7, y = -14.40003, y_mapped = [-15.3974256003822, -0.34001367983993835, 0.00667947609276541, 0.026323117226350175]\n",
      "x = 4.5, y = -0.8401146, y_mapped = [-8.997940413537334, -0.27244633210943625, -0.012765934747072008, 0.026323117226350175]\n",
      "x = 10.7, y = 38.790028, y_mapped = [-21.390346883553462, -0.21999878046948151, -0.02288496828237466, 0.026323117226350175]\n",
      "x = -8.8, y = 16.571745, y_mapped = [17.611497475280565, -0.12240558559311226, -0.04611716734264021, -0.0009892214086150014]\n",
      "x = 11.7, y = 31.159376, y_mapped = [-23.386126244971372, -0.0487810965095186, -0.06037937153581389, 0.026323117226350175]\n",
      "x = -15.4, y = 29.490164, y_mapped = [30.776164804685177, -0.10688574887778177, -0.04938064835041236, -0.0009892214086150014]\n",
      "x = 13.9, y = 15.310406, y_mapped = [-27.77289891441257, -0.2517466559791294, -0.013128123361533295, 0.026323117226350175]\n",
      "x = -17.9, y = 1.1692159, y_mapped = [35.74804840982171, -0.1488648233609809, -0.041469467973774786, -0.0009892214086150014]\n",
      "x = -3.1, y = -2.7701359, y_mapped = [6.212425245138065, -0.09608601520390243, -0.05130738718321487, -0.0009892214086150014]\n",
      "x = -10.1, y = -40.44977, y_mapped = [20.20818522067392, -0.06370576287577515, -0.05824995799579304, -0.0009892214086150014]\n",
      "x = -11.8, y = 24.606413, y_mapped = [23.601433994646985, -0.13181386060037809, -0.04437647260030466, -0.0009892214086150014]\n",
      "x = 18.8, y = 37.5234, y_mapped = [-37.519697081361066, -0.09235851153748656, -0.05160641149537402, 0.026323117226350175]\n",
      "x = -14.3, y = -30.492392, y_mapped = [28.585642647066056, -0.33459542836532896, -0.012021549083273492, -0.0009892214086150014]\n",
      "x = 6.3, y = 13.4726305, y_mapped = [-12.59837358311015, -0.09504001016683808, -0.05132202928935453, 0.026323117226350175]\n",
      "x = -18.8, y = 13.410461, y_mapped = [37.535484971706644, -0.09654289620147824, -0.05154790699373927, -0.0009892214086150014]\n",
      "x = 7.7, y = 15.392297, y_mapped = [-15.3974256003822, -0.34001367983993835, 0.00667947609276541, 0.026323117226350175]\n",
      "x = -2.8, y = -3.2989988, y_mapped = [5.612063687242796, -0.10819999284963383, -0.048820609306687565, -0.0009892214086150014]\n",
      "x = -8.2, y = -16.575344, y_mapped = [16.412548208429225, -0.20216433634193426, -0.030902629259251958, -0.0009892214086150014]\n",
      "x = 2.8, y = -36.151726, y_mapped = [-5.596275796897214, -0.08070141488933097, -0.05433370918242572, 0.026323117226350175]\n",
      "x = 14.1, y = 0.31000805, y_mapped = [-28.171402873159387, -1.0438397006191156, 2.8107413749910704, 0.026323117226350175]\n",
      "x = -4.0, y = -8.339117, y_mapped = [8.01334394247165, -0.04986031166445755, -0.06093531866066778, -0.0009892214086150014]\n",
      "x = 5.8, y = 11.520408, y_mapped = [-11.598420600388465, -0.074134475667373, -0.05559289728170917, 0.026323117226350175]\n",
      "x = 17.1, y = -34.927006, y_mapped = [-34.14230846091987, -0.30301533724547175, 0.0058851657803147064, 0.026323117226350175]\n",
      "x = 13.5, y = -21.734203, y_mapped = [-26.97573767324718, -0.14622788253626948, -0.040098580375424846, 0.026323117226350175]\n",
      "x = 14.7, y = -0.27583703, y_mapped = [-29.36659939984307, -0.032795203044926, -0.06319278026530231, 0.026323117226350175]\n",
      "x = 13.7, y = 28.15797, y_mapped = [-27.37434360580986, -0.1763066330162143, -0.03302803476088867, 0.026323117226350175]\n",
      "x = -7.9, y = -0.21800028, y_mapped = [15.812969491810549, -0.9692745952746242, 0.06962105410346295, -0.0009892214086150014]\n",
      "x = -7.3, y = -9.224243, y_mapped = [14.613616359106638, -0.03231844815206546, -0.06491261448559292, -0.0009892214086150014]\n",
      "x = -9.1, y = -8.293134, y_mapped = [18.21086304392898, -0.10753946705897709, -0.049103443074040555, -0.0009892214086150014]\n",
      "x = 4.6, y = -7.905099, y_mapped = [-9.198005088975727, -0.43292826176965415, 0.02648590879268526, 0.026323117226350175]\n",
      "x = 19.7, y = 38.955273, y_mapped = [-39.30573765922538, -0.13799094634718917, -0.04162172295740083, 0.026323117226350175]\n",
      "x = 17.6, y = -35.10534, y_mapped = [-35.13614930480773, 0.023204653623213223, -0.07236642241080708, 0.026323117226350175]\n",
      "x = -4.5, y = -9.88685, y_mapped = [9.013728303882916, 0.08354492437047148, -0.09038838374204128, -0.0009892214086150014]\n",
      "x = -5.7, y = 2.4492908, y_mapped = [11.414201333817417, -0.11998633283613863, -0.046505890364936464, -0.0009892214086150014]\n",
      "x = 13.6, y = 12.65079, y_mapped = [-27.17504692213312, -0.158753391130094, -0.03720806997337933, 0.026323117226350175]\n",
      "x = -1.0, y = 38.057026, y_mapped = [2.0094893606269624, -0.0343847046641939, -0.06398522681235805, -0.0009892214086150014]\n",
      "x = 3.0, y = -0.24295843, y_mapped = [-5.996519598954433, -0.08892105396553698, -0.052647646039680016, 0.026323117226350175]\n",
      "x = -18.3, y = -19.014248, y_mapped = [36.54263286210151, -0.11832480355736148, -0.047197345736284264, -0.0009892214086150014]\n",
      "x = 7.7, y = 7.778326, y_mapped = [-15.3974256003822, -0.34001367983993835, 0.00667947609276541, 0.026323117226350175]\n",
      "x = -12.4, y = 1.2345738, y_mapped = [24.798320522035617, -0.10105130429028643, -0.05049177575709189, -0.0009892214086150014]\n",
      "x = 11.7, y = 11.846094, y_mapped = [-23.386126244971372, -0.0487810965095186, -0.06037937153581389, 0.026323117226350175]\n",
      "x = -2.8, y = -2.6560864, y_mapped = [5.612063687242796, -0.10819999284963383, -0.048820609306687565, -0.0009892214086150014]\n",
      "x = -9.7, y = 18.183699, y_mapped = [19.40936361140957, -0.08365270700127433, -0.054018809612035604, -0.0009892214086150014]\n",
      "x = 10.4, y = 10.410377, y_mapped = [-20.79141550031618, -0.1510834105477861, -0.03921943129572327, 0.026323117226350175]\n",
      "x = -19.1, y = -38.155376, y_mapped = [38.13099013155893, -0.08477140558086832, -0.05400280410268596, -0.0009892214086150014]\n",
      "x = -14.7, y = -23.71317, y_mapped = [29.382387290188657, -0.1561062046940388, -0.039961538223810975, -0.0009892214086150014]\n",
      "x = 9.2, y = 7.5970726, y_mapped = [-18.394846904194107, -0.08553608180253125, -0.05320278525235847, 0.026323117226350175]\n",
      "x = -9.6, y = -10.995601, y_mapped = [19.2096354796742, -0.08771266913786195, -0.053172325053905435, -0.0009892214086150014]\n",
      "x = -3.2, y = 7.2523284, y_mapped = [6.4125401134231055, -0.09222464559260847, -0.052102637198487636, -0.0009892214086150014]\n",
      "x = -10.6, y = 19.67348, y_mapped = [21.206500775419048, -0.00271279830098671, -0.07202550535186256, -0.0009892214086150014]\n",
      "x = -12.5, y = 25.675346, y_mapped = [24.997761986379928, -0.09713442457505661, -0.05129274323694748, -0.0009892214086150014]\n",
      "x = -5.3, y = -4.3722925, y_mapped = [10.61412059674345, -0.1525463999063336, -0.04000746503012759, -0.0009892214086150014]\n",
      "x = 14.6, y = -0.677509, y_mapped = [-29.167433355843936, -0.016417982559545075, -0.06613630462672432, 0.026323117226350175]\n",
      "x = -16.8, y = -34.480774, y_mapped = [33.561602484135236, -0.02084663262889165, -0.06850740583904757, -0.0009892214086150014]\n",
      "x = 2.842171e-13, y = 1.0261426, y_mapped = [0.007893945172222187, -0.09445070386949336, -0.05157715924455439, 0.012666947909063843]\n",
      "x = 5.7, y = 31.600712, y_mapped = [-11.398413443471835, -0.06891507490282617, -0.05664842812417682, 0.026323117226350175]\n",
      "x = -4.6, y = -0.4953994, y_mapped = [9.213792979321308, 0.24402685403068936, -0.12964022728179855, -0.0009892214086150014]\n",
      "x = -15.0, y = -13.989205, y_mapped = [29.97980368904661, -0.12772905304486554, -0.045281305203944806, -0.0009892214086150014]\n",
      "x = -1.3, y = 17.94832, y_mapped = [2.609954054095034, 0.04437820099068812, -0.08047710681094297, -0.0009892214086150014]\n",
      "x = -4.6, y = -3.321962, y_mapped = [9.213792979321308, 0.24402685403068936, -0.12964022728179855, -0.0009892214086150014]\n",
      "x = -8.2, y = 15.767493, y_mapped = [16.412548208429225, -0.20216433634193426, -0.030902629259251958, -0.0009892214086150014]\n",
      "x = 13.3, y = 27.148037, y_mapped = [-26.57708184317874, -0.12901008568651132, -0.04395317964705526, 0.026323117226350175]\n",
      "x = 18.2, y = 18.535152, y_mapped = [-36.32822382232924, -0.0648699993669442, -0.057058748118323906, 0.026323117226350175]\n",
      "x = -10.0, y = 18.979424, y_mapped = [20.008493639874906, -0.0695654330433975, -0.05699412142676449, -0.0009892214086150014]\n",
      "x = -12.0, y = 0.670648, y_mapped = [24.00044084600077, -0.11914744853862164, -0.046858246316537545, -0.0009892214086150014]\n",
      "x = 18.7, y = 0.8322721, y_mapped = [-37.32116077384791, -0.08845507143059567, -0.05240376769858573, 0.026323117226350175]\n",
      "x = -20.0, y = -19.28497, y_mapped = [39.916551034398516, -0.009245288652264594, -0.07191402198783244, -0.0009892214086150014]\n",
      "x = 12.5, y = 23.7267, y_mapped = [-24.981974096034342, -0.09176698316390819, -0.05186157525216581, 0.026323117226350175]\n",
      "x = -19.3, y = -38.458572, y_mapped = [38.5279062165663, -0.07601384326325511, -0.055880906023859214, -0.0009892214086150014]\n",
      "x = 16.3, y = 16.863394, y_mapped = [-32.55135030480821, -0.12017865826615537, -0.04577742688319246, 0.026323117226350175]\n",
      "x = 6.7, y = 6.232807, y_mapped = [-13.39823104499796, -0.1114604008685732, -0.047912489734927566, 0.026323117226350175]\n",
      "x = 9.8, y = -21.007133, y_mapped = [-19.59329485297706, -0.10954316298238355, -0.04823488010108325, 0.026323117226350175]\n",
      "x = 10.1, y = 20.669428, y_mapped = [-20.192397330328333, -0.12519564486318965, -0.04490436049332024, 0.026323117226350175]\n",
      "x = 13.6, y = 28.536507, y_mapped = [-27.17504692213312, -0.158753391130094, -0.03720806997337933, 0.026323117226350175]\n",
      "x = -14.4, y = -15.698657, y_mapped = [28.78484883414307, -0.23991744143560667, -0.025773555564357724, -0.0009892214086150014]\n",
      "x = -9.1, y = -31.648926, y_mapped = [18.21086304392898, -0.10753946705897709, -0.049103443074040555, -0.0009892214086150014]\n",
      "x = 16.6, y = -33.41535, y_mapped = [-33.148074606678556, -0.14189483033386135, -0.04089509987107702, 0.026323117226350175]\n",
      "x = -12.4, y = 26.599438, y_mapped = [24.798320522035617, -0.10105130429028643, -0.05049177575709189, -0.0009892214086150014]\n",
      "x = -1.9, y = -4.0369043, y_mapped = [3.8108482191393898, -0.2075758960778239, -0.028728281228153088, -0.0009892214086150014]\n",
      "x = 12.2, y = -0.010358215, y_mapped = [-24.38361537491528, -0.07951189878132127, -0.0543501155820553, 0.026323117226350175]\n",
      "x = 16.5, y = -33.964134, y_mapped = [-32.94918165920264, -0.13324013051461822, -0.042872364024397154, 0.026323117226350175]\n",
      "x = 5.3, y = -10.291622, y_mapped = [-10.59833270639787, -0.03635500783263121, -0.0631468534589857, 0.026323117226350175]\n",
      "x = 17.9, y = 28.078455, y_mapped = [-35.732260519476135, -0.040036584377983894, -0.0616848505153385, 0.026323117226350175]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.optimize import curve_fit\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Define the 50 unique functions\n",
    "def unique_func_1(x, a, b, c):\n",
    "    return a * np.tan(b * x) + c\n",
    "\n",
    "def unique_func_2(x, a, b, c):\n",
    "    return a * np.arctan(b * x) + c\n",
    "\n",
    "def unique_func_3(x, a, b, c):\n",
    "    return a * np.tanh(b * x) + c\n",
    "\n",
    "# Define the function that selects the four unique functions\n",
    "def select_unique_functions(training_data, unique_functions):\n",
    "    unique_function_params = []\n",
    "    for i in range(1, 5):  # Assuming the dataset starts from column 1\n",
    "        x_data = training_data['x']  # Assuming x values are stored in a column named 'x'\n",
    "        y_data = training_data[f'y{i}']  # Access the y values for function i\n",
    "        best_fit_function = None\n",
    "        best_fit_params = None\n",
    "        best_fit_error = float('inf')\n",
    "        for j in range(len(unique_functions)):\n",
    "            try:\n",
    "                params, _ = curve_fit(unique_functions[j], x_data, y_data)\n",
    "                y_fit = unique_functions[j](x_data, *params)\n",
    "                error = np.sum((y_data - y_fit) ** 2)\n",
    "                if error < best_fit_error:\n",
    "                    best_fit_function = unique_functions[j]\n",
    "                    best_fit_params = params\n",
    "                    best_fit_error = error\n",
    "            except:\n",
    "                pass\n",
    "        unique_function_params.append((best_fit_function, best_fit_params))\n",
    "    return unique_function_params\n",
    "\n",
    "# Define the function that maps the x-y-pairs of values to the four chosen unique functions\n",
    "def map_to_unique_functions(x, unique_function_params):\n",
    "    y_mapped = []\n",
    "    for i in range(len(x)):\n",
    "        x_i = x[i]\n",
    "        y_i = []\n",
    "        for j in range(4):\n",
    "            unique_function = unique_function_params[j][0]\n",
    "            unique_function_params_j = unique_function_params[j][1]\n",
    "            try:\n",
    "                y_i_j = unique_function(x_i, *unique_function_params_j)\n",
    "            except:\n",
    "                y_i_j = None\n",
    "                raise\n",
    "            y_i.append(y_i_j)\n",
    "        y_mapped.append(y_i)\n",
    "    return y_mapped\n",
    "\n",
    "# Define the training data\n",
    "training_data = pd.read_csv('train.csv')\n",
    "\n",
    "# Define the test data\n",
    "test_data = pd.read_csv('test.csv')\n",
    "\n",
    "# Choose the four unique functions\n",
    "unique_functions = [unique_func_1, unique_func_2, unique_func_3]  # Add more functions if needed\n",
    "unique_function_params = select_unique_functions(training_data, unique_functions)\n",
    "\n",
    "# Map the x-y-pairs of values to the four chosen unique functions\n",
    "x_test = test_data['x']\n",
    "y_test = test_data['y']\n",
    "y_mapped = map_to_unique_functions(x_test, unique_function_params)\n",
    "\n",
    "# Print the results\n",
    "print('Unique functions:')\n",
    "for i in range(4):\n",
    "    print(f'Function {i + 1}: {unique_function_params[i][0].__name__} with parameters {unique_function_params[i][1]}')\n",
    "print('Mapping of test data to unique functions:')\n",
    "for i in range(len(x_test)):\n",
    "    print(f'x = {x_test[i]}, y = {y_test[i]}, y_mapped = {y_mapped[i]}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b28304d7-dced-4760-a0f5-dd90c908137b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
